# -*- coding: utf-8 -*-
"""ML_assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DAG_Bjo8_3j1wtDaX_EvTt5gz8AEOid4
"""

import numpy as np
import matplotlib.pyplot as plt

# Constants
N = 10
sin_curve_points = 100
seed = 0
m = [0,1,3,9]

# Generating random seed
np.random.seed(seed)

# Initialization
pts = np.arange(0,1,1.0/N,dtype=float).reshape(-1,1)

# Generating noise - StandX_testard Gaussian Distribution
noise = np.random.normal(0,0.05, size=(N,1))

# Function to generate N points
# param degree - Attributes with degree 0 ... degree
def generatePoints(degree):
  
    # Generating X values in the range(0,1) with a step of 1/N
    X = np.ones(shape=np.shape(pts), dtype=float)
    
    for i in range(degree):
        X = np.append(X, pts**(i+1), axis=1)

    # Find Y = sin(2*pi*x) + noise
    Y = np.sin(2*np.pi*pts) + noise

    return X, Y

pts

# Generating sine curve points
x = np.arange(0, 1, 1.0/sin_curve_points, dtype=float).reshape(-1,1)
sin_curve_y = np.sin(2*np.pi*x).reshape(-1,1)

def plotGraph(X, Y, title, subplot_index, w = None, degree = None):
    delta = 0.1
    legend_handles = []
    plt.subplot(2, 3, subplot_index)

    # Setting the dimensions
    plt.ylim( -1-delta, 1+delta)
    plt.xlim( -delta, 1+delta)
    plt.title(title)

    # Plotting the points
    plt.scatter(X, Y, label="Data Points", color='blue')
    
    # Plotting the sine curve
    plt.plot(x, sin_curve_y, label="Sine Curve", color='green')
    
    
    # Plotting the fit line
    if w is not None:
        X_test = np.ones(shape=np.shape(x), dtype=float)
        for i in range(degree):
            X_test = np.append(X_test, x**(i+1), axis=1)
        fit_curve_y = predict(X_test, w)
        plt.plot(x, fit_curve_y, label="Fit Curve", color='red')
        
    
    plt.legend(loc='upper right')

def predict(X, w):
    return np.dot(X, w).reshape(-1,1)

"""# Without Regularization"""

print("Without Regularization")
plt.rcParams['figure.figsize'] = [18.0, 12.0]

for i in range(len(m)):
    M = m[i]
    X, Y = generatePoints(M)
    n_col = X.shape[1]
    w = np.linalg.lstsq(X, Y)[0]
    print("Degree: "+str(M))
    print("Weights:")
    print(w)
    print("------------------")
    plotGraph(pts, Y, 'Degree: '+str(M), i+2, w = w, degree = M)
plotGraph(pts, Y, 'Actual', 1)
plt.show()

"""# With Regularization"""

# Ref https://en.wikipedia.org/wiki/Regularized_least_squares
print("With Regularization")
_lambda_log = [-18, 0, 1] 
M = 9
plt.rcParams['figure.figsize'] = [18.0, 12.0]
for i in range(len(_lambda_log)):
    _lambda = np.exp(_lambda_log[i])
    # Should have used log 10 indeed
    # _lambda = np.log10(_lambda_log[i])   
    X, Y = generatePoints(M)
    n_col = X.shape[1]
    w = np.linalg.lstsq(X.T.dot(X) + _lambda * np.identity(n_col), X.T.dot(Y))[0]
    print("Degree: "+str(M))
    print("Log Lambda: "+str(_lambda_log[i]))
    print("Weights:")
    print(w)
    print("------------------")
    plotGraph(pts, Y, 'Degree: '+str(M)+', Lambda: '+ str(_lambda_log[i]), i+2, w = w, degree = M)
plotGraph(pts, Y, 'Actual', 1)
plt.show()

